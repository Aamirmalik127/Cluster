{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pd' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-ae1e19f06d0b>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mdf\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"try.csv\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'pd' is not defined"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv(\"try.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[['Name','date1','date2']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.sort_values(by=['Name','date1','date2'])\n",
    "df['date1'] = pd.to_datetime(df['date1'])\n",
    "df['date2'] = pd.to_datetime(df['date2'])\n",
    "df['days_stayed'] = abs(round((df['date2'] - df['date1'])/np.timedelta64(1,'D'),3)+1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[['Name','days_stayed']].groupby('Name').sum().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>days_stayed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>X1</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>X2</td>\n",
       "      <td>315.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>x10</td>\n",
       "      <td>2513.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Name  days_stayed\n",
       "0   X1          3.0\n",
       "1   X2        315.0\n",
       "2  x10       2513.0"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['revenue'] = df['days_stayed']*random.random()+30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>days_stayed</th>\n",
       "      <th>revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>X1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>30.233536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>X2</td>\n",
       "      <td>315.0</td>\n",
       "      <td>54.521270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>x10</td>\n",
       "      <td>2513.0</td>\n",
       "      <td>225.625245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>x100</td>\n",
       "      <td>1903.0</td>\n",
       "      <td>178.139611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>x101</td>\n",
       "      <td>1808.0</td>\n",
       "      <td>170.744307</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Name  days_stayed     revenue\n",
       "0    X1          3.0   30.233536\n",
       "1    X2        315.0   54.521270\n",
       "2   x10       2513.0  225.625245\n",
       "3  x100       1903.0  178.139611\n",
       "4  x101       1808.0  170.744307"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns; sns.set()  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "plt.rcParams['figure.figsize'] = (16, 9)\n",
    "plt.style.use('ggplot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'revenue')"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x648 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['days_stayed'],df['revenue'])\n",
    "plt.xlabel('days_stayed')\n",
    "plt.ylabel('revenue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'days_stayed / revenue')"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x648 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualizing the data - displot\n",
    "plot_income = sns.distplot(df[\"days_stayed\"])\n",
    "plot_spend = sns.distplot(df[\"revenue\"])\n",
    "plt.xlabel('days_stayed / revenue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.set_index('Name')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[179729596.81556112,\n",
       " 60890956.96569571,\n",
       " 32652636.977201555,\n",
       " 16640205.785106814,\n",
       " 12259784.325789511,\n",
       " 8598956.201487526,\n",
       " 6040559.803036572,\n",
       " 4718619.450015769,\n",
       " 3374803.734286014]"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "\n",
    "wcss =[]\n",
    "for i in range(1,10):\n",
    " kmeans = KMeans(i)\n",
    " kmeans.fit(df)\n",
    " wcss.append(kmeans.inertia_)\n",
    "\n",
    "wcss\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'WCSS')"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x648 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the number of clusters vs WCSS\n",
    "plt.plot(range(1,10),wcss)\n",
    "# Name your axes\n",
    "plt.xlabel('Number of')\n",
    "plt.ylabel('WCSS')\n",
    "           \n",
    "           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "kmeans_new = KMeans(4)\n",
    "kmeans_new.fit(df)\n",
    "clusters_new = df.copy()\n",
    "clusters_new['cluster_pred'] = kmeans_new.fit_predict(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'revenue')"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x648 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(clusters_new[clusters_new['cluster_pred']==0]['days_stayed'],clusters_new[clusters_new['cluster_pred']==0]['revenue'],c='purple',label='cluster1',s=50)\n",
    "plt.scatter(clusters_new[clusters_new['cluster_pred']==1]['days_stayed'],clusters_new[clusters_new['cluster_pred']==1]['revenue'],c='blue',label='cluster2',s=50)\n",
    "plt.scatter(clusters_new[clusters_new['cluster_pred']==2]['days_stayed'],clusters_new[clusters_new['cluster_pred']==2]['revenue'],c='green',label='cluster3',s=50)\n",
    "plt.scatter(clusters_new[clusters_new['cluster_pred']==3]['days_stayed'],clusters_new[clusters_new['cluster_pred']==3]['revenue'],c='cyan',label='cluster4',s=50)\n",
    "\n",
    "00.......,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n",
    "\n",
    "\n",
    "\n",
    "plt.xlabel('days_stayed')\n",
    "plt.legend()\n",
    "plt.ylabel('revenue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>days_stayed</th>\n",
       "      <td>39.0</td>\n",
       "      <td>2908.820513</td>\n",
       "      <td>292.317228</td>\n",
       "      <td>2417.000000</td>\n",
       "      <td>2662.000000</td>\n",
       "      <td>2936.000000</td>\n",
       "      <td>3090.500000</td>\n",
       "      <td>3525.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revenue</th>\n",
       "      <td>39.0</td>\n",
       "      <td>256.438013</td>\n",
       "      <td>22.755523</td>\n",
       "      <td>218.152096</td>\n",
       "      <td>237.224195</td>\n",
       "      <td>258.553808</td>\n",
       "      <td>270.580908</td>\n",
       "      <td>304.404692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cluster_pred</th>\n",
       "      <td>39.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              count         mean         std          min          25%  \\\n",
       "days_stayed    39.0  2908.820513  292.317228  2417.000000  2662.000000   \n",
       "revenue        39.0   256.438013   22.755523   218.152096   237.224195   \n",
       "cluster_pred   39.0     0.000000    0.000000     0.000000     0.000000   \n",
       "\n",
       "                      50%          75%          max  \n",
       "days_stayed   2936.000000  3090.500000  3525.000000  \n",
       "revenue        258.553808   270.580908   304.404692  \n",
       "cluster_pred     0.000000     0.000000     0.000000  "
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clusters_new[clusters_new['cluster_pred']==0].describe().transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>days_stayed</th>\n",
       "      <td>31.0</td>\n",
       "      <td>706.032258</td>\n",
       "      <td>351.031573</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>435.000000</td>\n",
       "      <td>739.000000</td>\n",
       "      <td>968.000000</td>\n",
       "      <td>1240.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revenue</th>\n",
       "      <td>31.0</td>\n",
       "      <td>84.961295</td>\n",
       "      <td>27.326159</td>\n",
       "      <td>30.077845</td>\n",
       "      <td>63.862707</td>\n",
       "      <td>87.527679</td>\n",
       "      <td>105.354253</td>\n",
       "      <td>126.528175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cluster_pred</th>\n",
       "      <td>31.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              count        mean         std        min         25%  \\\n",
       "days_stayed    31.0  706.032258  351.031573   1.000000  435.000000   \n",
       "revenue        31.0   84.961295   27.326159  30.077845   63.862707   \n",
       "cluster_pred   31.0    1.000000    0.000000   1.000000    1.000000   \n",
       "\n",
       "                     50%         75%          max  \n",
       "days_stayed   739.000000  968.000000  1240.000000  \n",
       "revenue        87.527679  105.354253   126.528175  \n",
       "cluster_pred    1.000000    1.000000     1.000000  "
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clusters_new[clusters_new['cluster_pred']==1].describe().transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>days_stayed</th>\n",
       "      <td>59.0</td>\n",
       "      <td>1807.745763</td>\n",
       "      <td>285.816109</td>\n",
       "      <td>1282.000000</td>\n",
       "      <td>1603.500000</td>\n",
       "      <td>1824.000000</td>\n",
       "      <td>2016.00000</td>\n",
       "      <td>2332.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revenue</th>\n",
       "      <td>59.0</td>\n",
       "      <td>170.724516</td>\n",
       "      <td>22.249441</td>\n",
       "      <td>129.797678</td>\n",
       "      <td>154.824943</td>\n",
       "      <td>171.989832</td>\n",
       "      <td>186.93613</td>\n",
       "      <td>211.535246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cluster_pred</th>\n",
       "      <td>59.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              count         mean         std          min          25%  \\\n",
       "days_stayed    59.0  1807.745763  285.816109  1282.000000  1603.500000   \n",
       "revenue        59.0   170.724516   22.249441   129.797678   154.824943   \n",
       "cluster_pred   59.0     2.000000    0.000000     2.000000     2.000000   \n",
       "\n",
       "                      50%         75%          max  \n",
       "days_stayed   1824.000000  2016.00000  2332.000000  \n",
       "revenue        171.989832   186.93613   211.535246  \n",
       "cluster_pred     2.000000     2.00000     2.000000  "
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clusters_new[clusters_new['cluster_pred']==2].describe().transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>days_stayed</th>\n",
       "      <td>16.0</td>\n",
       "      <td>4213.687500</td>\n",
       "      <td>569.100778</td>\n",
       "      <td>3614.000000</td>\n",
       "      <td>3806.250000</td>\n",
       "      <td>4054.000000</td>\n",
       "      <td>4476.500000</td>\n",
       "      <td>5576.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revenue</th>\n",
       "      <td>16.0</td>\n",
       "      <td>358.015778</td>\n",
       "      <td>44.301822</td>\n",
       "      <td>311.332923</td>\n",
       "      <td>326.298683</td>\n",
       "      <td>345.584857</td>\n",
       "      <td>378.474497</td>\n",
       "      <td>464.065407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cluster_pred</th>\n",
       "      <td>16.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              count         mean         std          min          25%  \\\n",
       "days_stayed    16.0  4213.687500  569.100778  3614.000000  3806.250000   \n",
       "revenue        16.0   358.015778   44.301822   311.332923   326.298683   \n",
       "cluster_pred   16.0     3.000000    0.000000     3.000000     3.000000   \n",
       "\n",
       "                      50%          75%          max  \n",
       "days_stayed   4054.000000  4476.500000  5576.000000  \n",
       "revenue        345.584857   378.474497   464.065407  \n",
       "cluster_pred     3.000000     3.000000     3.000000  "
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clusters_new[clusters_new['cluster_pred']==3].describe().transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_first = df[['Name','date1']].groupby('Name').nth([0]).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_last = df[['Name','date2']].groupby('Name').nth([-1]).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tenure = pd.merge(df_first, df_last , how='left',on='Name')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>date1</th>\n",
       "      <th>date2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>X1</td>\n",
       "      <td>13/09/2010</td>\n",
       "      <td>17/09/2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>X2</td>\n",
       "      <td>11/9/2010</td>\n",
       "      <td>13/09/2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>x10</td>\n",
       "      <td>6/26/2011</td>\n",
       "      <td>7/29/2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>x100</td>\n",
       "      <td>3/24/2018</td>\n",
       "      <td>12/14/2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>x101</td>\n",
       "      <td>2/28/2017</td>\n",
       "      <td>3/1/2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>x102</td>\n",
       "      <td>2/16/2013</td>\n",
       "      <td>7/15/2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>x103</td>\n",
       "      <td>2/13/2011</td>\n",
       "      <td>1/29/2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>x104</td>\n",
       "      <td>7/6/2016</td>\n",
       "      <td>12/21/2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>x105</td>\n",
       "      <td>4/24/2018</td>\n",
       "      <td>6/29/2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>x106</td>\n",
       "      <td>12/7/2014</td>\n",
       "      <td>3/21/2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>x107</td>\n",
       "      <td>12/12/2014</td>\n",
       "      <td>9/19/2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>x108</td>\n",
       "      <td>1/23/2011</td>\n",
       "      <td>2/7/2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>x109</td>\n",
       "      <td>1/17/2010</td>\n",
       "      <td>6/25/2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>x11</td>\n",
       "      <td>5/5/2018</td>\n",
       "      <td>4/2/2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>x110</td>\n",
       "      <td>3/24/2010</td>\n",
       "      <td>4/19/2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>x111</td>\n",
       "      <td>11/7/2015</td>\n",
       "      <td>8/22/2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>x112</td>\n",
       "      <td>4/28/2018</td>\n",
       "      <td>11/12/2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>x113</td>\n",
       "      <td>7/30/2016</td>\n",
       "      <td>11/28/2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>x114</td>\n",
       "      <td>1/26/2010</td>\n",
       "      <td>9/8/2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>x115</td>\n",
       "      <td>5/13/2017</td>\n",
       "      <td>9/21/2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>x116</td>\n",
       "      <td>10/24/2018</td>\n",
       "      <td>5/12/2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>x117</td>\n",
       "      <td>5/12/2011</td>\n",
       "      <td>10/4/2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>x118</td>\n",
       "      <td>10/11/2013</td>\n",
       "      <td>1/26/2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>x119</td>\n",
       "      <td>8/3/2015</td>\n",
       "      <td>5/29/2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>x12</td>\n",
       "      <td>11/3/2012</td>\n",
       "      <td>10/20/2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>x120</td>\n",
       "      <td>1/22/2012</td>\n",
       "      <td>2/2/2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>x121</td>\n",
       "      <td>3/6/2014</td>\n",
       "      <td>12/7/2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>x122</td>\n",
       "      <td>11/18/2018</td>\n",
       "      <td>2/16/2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>x123</td>\n",
       "      <td>7/4/2011</td>\n",
       "      <td>2/23/2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>x124</td>\n",
       "      <td>12/24/2012</td>\n",
       "      <td>6/22/2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>x75</td>\n",
       "      <td>2/24/2011</td>\n",
       "      <td>4/8/2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>x76</td>\n",
       "      <td>5/13/2016</td>\n",
       "      <td>12/24/2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>x77</td>\n",
       "      <td>10/21/2014</td>\n",
       "      <td>4/14/2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121</th>\n",
       "      <td>x78</td>\n",
       "      <td>12/27/2014</td>\n",
       "      <td>2/23/2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>x79</td>\n",
       "      <td>3/26/2015</td>\n",
       "      <td>3/30/2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123</th>\n",
       "      <td>x8</td>\n",
       "      <td>12/14/2013</td>\n",
       "      <td>9/21/2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>x80</td>\n",
       "      <td>11/20/2016</td>\n",
       "      <td>1/7/2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>x81</td>\n",
       "      <td>1/22/2014</td>\n",
       "      <td>2/17/2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>x82</td>\n",
       "      <td>4/24/2015</td>\n",
       "      <td>4/9/2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>x83</td>\n",
       "      <td>6/20/2015</td>\n",
       "      <td>6/1/2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128</th>\n",
       "      <td>x84</td>\n",
       "      <td>2/8/2017</td>\n",
       "      <td>2/10/2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>x85</td>\n",
       "      <td>10/20/2015</td>\n",
       "      <td>10/7/2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>x86</td>\n",
       "      <td>10/21/2013</td>\n",
       "      <td>6/20/2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131</th>\n",
       "      <td>x87</td>\n",
       "      <td>7/17/2013</td>\n",
       "      <td>4/1/2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>x88</td>\n",
       "      <td>12/6/2010</td>\n",
       "      <td>2/8/2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>x89</td>\n",
       "      <td>2/29/2012</td>\n",
       "      <td>2/21/2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>x9</td>\n",
       "      <td>4/11/2017</td>\n",
       "      <td>12/28/2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>x90</td>\n",
       "      <td>10/29/2013</td>\n",
       "      <td>7/9/2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>x91</td>\n",
       "      <td>6/1/2013</td>\n",
       "      <td>11/1/2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>x92</td>\n",
       "      <td>3/4/2011</td>\n",
       "      <td>12/16/2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>x93</td>\n",
       "      <td>10/25/2018</td>\n",
       "      <td>11/9/2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>x94</td>\n",
       "      <td>11/28/2012</td>\n",
       "      <td>8/3/2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>x95</td>\n",
       "      <td>4/22/2018</td>\n",
       "      <td>11/28/2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>x96</td>\n",
       "      <td>11/26/2016</td>\n",
       "      <td>4/4/2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>x97</td>\n",
       "      <td>12/2/2015</td>\n",
       "      <td>8/12/2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143</th>\n",
       "      <td>x98</td>\n",
       "      <td>8/15/2012</td>\n",
       "      <td>9/8/2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>x99</td>\n",
       "      <td>1/27/2011</td>\n",
       "      <td>7/20/2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>x99</td>\n",
       "      <td>1/27/2011</td>\n",
       "      <td>1/23/2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>x99</td>\n",
       "      <td>11/21/2018</td>\n",
       "      <td>7/20/2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>x99</td>\n",
       "      <td>11/21/2018</td>\n",
       "      <td>1/23/2013</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>148 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Name       date1       date2\n",
       "0      X1  13/09/2010  17/09/2019\n",
       "1      X2   11/9/2010  13/09/2019\n",
       "2     x10   6/26/2011   7/29/2017\n",
       "3    x100   3/24/2018  12/14/2017\n",
       "4    x101   2/28/2017    3/1/2015\n",
       "5    x102   2/16/2013   7/15/2010\n",
       "6    x103   2/13/2011   1/29/2012\n",
       "7    x104    7/6/2016  12/21/2015\n",
       "8    x105   4/24/2018   6/29/2010\n",
       "9    x106   12/7/2014   3/21/2013\n",
       "10   x107  12/12/2014   9/19/2017\n",
       "11   x108   1/23/2011    2/7/2016\n",
       "12   x109   1/17/2010   6/25/2013\n",
       "13    x11    5/5/2018    4/2/2016\n",
       "14   x110   3/24/2010   4/19/2014\n",
       "15   x111   11/7/2015   8/22/2014\n",
       "16   x112   4/28/2018  11/12/2015\n",
       "17   x113   7/30/2016  11/28/2013\n",
       "18   x114   1/26/2010    9/8/2010\n",
       "19   x115   5/13/2017   9/21/2012\n",
       "20   x116  10/24/2018   5/12/2011\n",
       "21   x117   5/12/2011   10/4/2012\n",
       "22   x118  10/11/2013   1/26/2017\n",
       "23   x119    8/3/2015   5/29/2017\n",
       "24    x12   11/3/2012  10/20/2011\n",
       "25   x120   1/22/2012    2/2/2014\n",
       "26   x121    3/6/2014   12/7/2013\n",
       "27   x122  11/18/2018   2/16/2014\n",
       "28   x123    7/4/2011   2/23/2012\n",
       "29   x124  12/24/2012   6/22/2011\n",
       "..    ...         ...         ...\n",
       "118   x75   2/24/2011    4/8/2018\n",
       "119   x76   5/13/2016  12/24/2018\n",
       "120   x77  10/21/2014   4/14/2010\n",
       "121   x78  12/27/2014   2/23/2012\n",
       "122   x79   3/26/2015   3/30/2014\n",
       "123    x8  12/14/2013   9/21/2018\n",
       "124   x80  11/20/2016    1/7/2018\n",
       "125   x81   1/22/2014   2/17/2011\n",
       "126   x82   4/24/2015    4/9/2015\n",
       "127   x83   6/20/2015    6/1/2012\n",
       "128   x84    2/8/2017   2/10/2018\n",
       "129   x85  10/20/2015   10/7/2010\n",
       "130   x86  10/21/2013   6/20/2016\n",
       "131   x87   7/17/2013    4/1/2018\n",
       "132   x88   12/6/2010    2/8/2012\n",
       "133   x89   2/29/2012   2/21/2011\n",
       "134    x9   4/11/2017  12/28/2018\n",
       "135   x90  10/29/2013    7/9/2018\n",
       "136   x91    6/1/2013   11/1/2014\n",
       "137   x92    3/4/2011  12/16/2012\n",
       "138   x93  10/25/2018   11/9/2011\n",
       "139   x94  11/28/2012    8/3/2010\n",
       "140   x95   4/22/2018  11/28/2010\n",
       "141   x96  11/26/2016    4/4/2014\n",
       "142   x97   12/2/2015   8/12/2016\n",
       "143   x98   8/15/2012    9/8/2011\n",
       "144   x99   1/27/2011   7/20/2015\n",
       "145   x99   1/27/2011   1/23/2013\n",
       "146   x99  11/21/2018   7/20/2015\n",
       "147   x99  11/21/2018   1/23/2013\n",
       "\n",
       "[148 rows x 3 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tenure"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### converting column to date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Name             object\n",
       "date1    datetime64[ns]\n",
       "date2    datetime64[ns]\n",
       "dtype: object"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tenure.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tenure['eng_days'] = round((df_tenure['date2'] - df_tenure['date1'])/np.timedelta64(1,'D'),3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>date1</th>\n",
       "      <th>date2</th>\n",
       "      <th>eng_days</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>X1</td>\n",
       "      <td>2010-09-13</td>\n",
       "      <td>2019-09-17</td>\n",
       "      <td>3291.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>X2</td>\n",
       "      <td>2010-11-09</td>\n",
       "      <td>2019-09-13</td>\n",
       "      <td>3230.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>x10</td>\n",
       "      <td>2011-06-26</td>\n",
       "      <td>2017-07-29</td>\n",
       "      <td>2225.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>x100</td>\n",
       "      <td>2018-03-24</td>\n",
       "      <td>2017-12-14</td>\n",
       "      <td>-100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>x101</td>\n",
       "      <td>2017-02-28</td>\n",
       "      <td>2015-03-01</td>\n",
       "      <td>-730.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>x102</td>\n",
       "      <td>2013-02-16</td>\n",
       "      <td>2010-07-15</td>\n",
       "      <td>-947.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>x103</td>\n",
       "      <td>2011-02-13</td>\n",
       "      <td>2012-01-29</td>\n",
       "      <td>350.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>x104</td>\n",
       "      <td>2016-07-06</td>\n",
       "      <td>2015-12-21</td>\n",
       "      <td>-198.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>x105</td>\n",
       "      <td>2018-04-24</td>\n",
       "      <td>2010-06-29</td>\n",
       "      <td>-2856.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>x106</td>\n",
       "      <td>2014-12-07</td>\n",
       "      <td>2013-03-21</td>\n",
       "      <td>-626.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>x107</td>\n",
       "      <td>2014-12-12</td>\n",
       "      <td>2017-09-19</td>\n",
       "      <td>1012.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>x108</td>\n",
       "      <td>2011-01-23</td>\n",
       "      <td>2016-02-07</td>\n",
       "      <td>1841.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>x109</td>\n",
       "      <td>2010-01-17</td>\n",
       "      <td>2013-06-25</td>\n",
       "      <td>1255.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>x11</td>\n",
       "      <td>2018-05-05</td>\n",
       "      <td>2016-04-02</td>\n",
       "      <td>-763.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>x110</td>\n",
       "      <td>2010-03-24</td>\n",
       "      <td>2014-04-19</td>\n",
       "      <td>1487.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>x111</td>\n",
       "      <td>2015-11-07</td>\n",
       "      <td>2014-08-22</td>\n",
       "      <td>-442.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>x112</td>\n",
       "      <td>2018-04-28</td>\n",
       "      <td>2015-11-12</td>\n",
       "      <td>-898.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>x113</td>\n",
       "      <td>2016-07-30</td>\n",
       "      <td>2013-11-28</td>\n",
       "      <td>-975.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>x114</td>\n",
       "      <td>2010-01-26</td>\n",
       "      <td>2010-09-08</td>\n",
       "      <td>225.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>x115</td>\n",
       "      <td>2017-05-13</td>\n",
       "      <td>2012-09-21</td>\n",
       "      <td>-1695.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>x116</td>\n",
       "      <td>2018-10-24</td>\n",
       "      <td>2011-05-12</td>\n",
       "      <td>-2722.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>x117</td>\n",
       "      <td>2011-05-12</td>\n",
       "      <td>2012-10-04</td>\n",
       "      <td>511.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>x118</td>\n",
       "      <td>2013-10-11</td>\n",
       "      <td>2017-01-26</td>\n",
       "      <td>1203.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>x119</td>\n",
       "      <td>2015-08-03</td>\n",
       "      <td>2017-05-29</td>\n",
       "      <td>665.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>x12</td>\n",
       "      <td>2012-11-03</td>\n",
       "      <td>2011-10-20</td>\n",
       "      <td>-380.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>x120</td>\n",
       "      <td>2012-01-22</td>\n",
       "      <td>2014-02-02</td>\n",
       "      <td>742.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>x121</td>\n",
       "      <td>2014-03-06</td>\n",
       "      <td>2013-12-07</td>\n",
       "      <td>-89.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>x122</td>\n",
       "      <td>2018-11-18</td>\n",
       "      <td>2014-02-16</td>\n",
       "      <td>-1736.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>x123</td>\n",
       "      <td>2011-07-04</td>\n",
       "      <td>2012-02-23</td>\n",
       "      <td>234.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>x124</td>\n",
       "      <td>2012-12-24</td>\n",
       "      <td>2011-06-22</td>\n",
       "      <td>-551.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>x75</td>\n",
       "      <td>2011-02-24</td>\n",
       "      <td>2018-04-08</td>\n",
       "      <td>2600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>x76</td>\n",
       "      <td>2016-05-13</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>955.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>x77</td>\n",
       "      <td>2014-10-21</td>\n",
       "      <td>2010-04-14</td>\n",
       "      <td>-1651.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121</th>\n",
       "      <td>x78</td>\n",
       "      <td>2014-12-27</td>\n",
       "      <td>2012-02-23</td>\n",
       "      <td>-1038.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>x79</td>\n",
       "      <td>2015-03-26</td>\n",
       "      <td>2014-03-30</td>\n",
       "      <td>-361.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123</th>\n",
       "      <td>x8</td>\n",
       "      <td>2013-12-14</td>\n",
       "      <td>2018-09-21</td>\n",
       "      <td>1742.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>x80</td>\n",
       "      <td>2016-11-20</td>\n",
       "      <td>2018-01-07</td>\n",
       "      <td>413.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>x81</td>\n",
       "      <td>2014-01-22</td>\n",
       "      <td>2011-02-17</td>\n",
       "      <td>-1070.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>x82</td>\n",
       "      <td>2015-04-24</td>\n",
       "      <td>2015-04-09</td>\n",
       "      <td>-15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>x83</td>\n",
       "      <td>2015-06-20</td>\n",
       "      <td>2012-06-01</td>\n",
       "      <td>-1114.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128</th>\n",
       "      <td>x84</td>\n",
       "      <td>2017-02-08</td>\n",
       "      <td>2018-02-10</td>\n",
       "      <td>367.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>x85</td>\n",
       "      <td>2015-10-20</td>\n",
       "      <td>2010-10-07</td>\n",
       "      <td>-1839.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>x86</td>\n",
       "      <td>2013-10-21</td>\n",
       "      <td>2016-06-20</td>\n",
       "      <td>973.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131</th>\n",
       "      <td>x87</td>\n",
       "      <td>2013-07-17</td>\n",
       "      <td>2018-04-01</td>\n",
       "      <td>1719.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>x88</td>\n",
       "      <td>2010-12-06</td>\n",
       "      <td>2012-02-08</td>\n",
       "      <td>429.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>x89</td>\n",
       "      <td>2012-02-29</td>\n",
       "      <td>2011-02-21</td>\n",
       "      <td>-373.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>x9</td>\n",
       "      <td>2017-04-11</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>626.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>x90</td>\n",
       "      <td>2013-10-29</td>\n",
       "      <td>2018-07-09</td>\n",
       "      <td>1714.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>x91</td>\n",
       "      <td>2013-06-01</td>\n",
       "      <td>2014-11-01</td>\n",
       "      <td>518.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>x92</td>\n",
       "      <td>2011-03-04</td>\n",
       "      <td>2012-12-16</td>\n",
       "      <td>653.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>x93</td>\n",
       "      <td>2018-10-25</td>\n",
       "      <td>2011-11-09</td>\n",
       "      <td>-2542.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>x94</td>\n",
       "      <td>2012-11-28</td>\n",
       "      <td>2010-08-03</td>\n",
       "      <td>-848.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>x95</td>\n",
       "      <td>2018-04-22</td>\n",
       "      <td>2010-11-28</td>\n",
       "      <td>-2702.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>x96</td>\n",
       "      <td>2016-11-26</td>\n",
       "      <td>2014-04-04</td>\n",
       "      <td>-967.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>x97</td>\n",
       "      <td>2015-12-02</td>\n",
       "      <td>2016-08-12</td>\n",
       "      <td>254.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143</th>\n",
       "      <td>x98</td>\n",
       "      <td>2012-08-15</td>\n",
       "      <td>2011-09-08</td>\n",
       "      <td>-342.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>x99</td>\n",
       "      <td>2011-01-27</td>\n",
       "      <td>2015-07-20</td>\n",
       "      <td>1635.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>x99</td>\n",
       "      <td>2011-01-27</td>\n",
       "      <td>2013-01-23</td>\n",
       "      <td>727.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>x99</td>\n",
       "      <td>2018-11-21</td>\n",
       "      <td>2015-07-20</td>\n",
       "      <td>-1220.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>x99</td>\n",
       "      <td>2018-11-21</td>\n",
       "      <td>2013-01-23</td>\n",
       "      <td>-2128.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>148 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Name      date1      date2  eng_days\n",
       "0      X1 2010-09-13 2019-09-17    3291.0\n",
       "1      X2 2010-11-09 2019-09-13    3230.0\n",
       "2     x10 2011-06-26 2017-07-29    2225.0\n",
       "3    x100 2018-03-24 2017-12-14    -100.0\n",
       "4    x101 2017-02-28 2015-03-01    -730.0\n",
       "5    x102 2013-02-16 2010-07-15    -947.0\n",
       "6    x103 2011-02-13 2012-01-29     350.0\n",
       "7    x104 2016-07-06 2015-12-21    -198.0\n",
       "8    x105 2018-04-24 2010-06-29   -2856.0\n",
       "9    x106 2014-12-07 2013-03-21    -626.0\n",
       "10   x107 2014-12-12 2017-09-19    1012.0\n",
       "11   x108 2011-01-23 2016-02-07    1841.0\n",
       "12   x109 2010-01-17 2013-06-25    1255.0\n",
       "13    x11 2018-05-05 2016-04-02    -763.0\n",
       "14   x110 2010-03-24 2014-04-19    1487.0\n",
       "15   x111 2015-11-07 2014-08-22    -442.0\n",
       "16   x112 2018-04-28 2015-11-12    -898.0\n",
       "17   x113 2016-07-30 2013-11-28    -975.0\n",
       "18   x114 2010-01-26 2010-09-08     225.0\n",
       "19   x115 2017-05-13 2012-09-21   -1695.0\n",
       "20   x116 2018-10-24 2011-05-12   -2722.0\n",
       "21   x117 2011-05-12 2012-10-04     511.0\n",
       "22   x118 2013-10-11 2017-01-26    1203.0\n",
       "23   x119 2015-08-03 2017-05-29     665.0\n",
       "24    x12 2012-11-03 2011-10-20    -380.0\n",
       "25   x120 2012-01-22 2014-02-02     742.0\n",
       "26   x121 2014-03-06 2013-12-07     -89.0\n",
       "27   x122 2018-11-18 2014-02-16   -1736.0\n",
       "28   x123 2011-07-04 2012-02-23     234.0\n",
       "29   x124 2012-12-24 2011-06-22    -551.0\n",
       "..    ...        ...        ...       ...\n",
       "118   x75 2011-02-24 2018-04-08    2600.0\n",
       "119   x76 2016-05-13 2018-12-24     955.0\n",
       "120   x77 2014-10-21 2010-04-14   -1651.0\n",
       "121   x78 2014-12-27 2012-02-23   -1038.0\n",
       "122   x79 2015-03-26 2014-03-30    -361.0\n",
       "123    x8 2013-12-14 2018-09-21    1742.0\n",
       "124   x80 2016-11-20 2018-01-07     413.0\n",
       "125   x81 2014-01-22 2011-02-17   -1070.0\n",
       "126   x82 2015-04-24 2015-04-09     -15.0\n",
       "127   x83 2015-06-20 2012-06-01   -1114.0\n",
       "128   x84 2017-02-08 2018-02-10     367.0\n",
       "129   x85 2015-10-20 2010-10-07   -1839.0\n",
       "130   x86 2013-10-21 2016-06-20     973.0\n",
       "131   x87 2013-07-17 2018-04-01    1719.0\n",
       "132   x88 2010-12-06 2012-02-08     429.0\n",
       "133   x89 2012-02-29 2011-02-21    -373.0\n",
       "134    x9 2017-04-11 2018-12-28     626.0\n",
       "135   x90 2013-10-29 2018-07-09    1714.0\n",
       "136   x91 2013-06-01 2014-11-01     518.0\n",
       "137   x92 2011-03-04 2012-12-16     653.0\n",
       "138   x93 2018-10-25 2011-11-09   -2542.0\n",
       "139   x94 2012-11-28 2010-08-03    -848.0\n",
       "140   x95 2018-04-22 2010-11-28   -2702.0\n",
       "141   x96 2016-11-26 2014-04-04    -967.0\n",
       "142   x97 2015-12-02 2016-08-12     254.0\n",
       "143   x98 2012-08-15 2011-09-08    -342.0\n",
       "144   x99 2011-01-27 2015-07-20    1635.0\n",
       "145   x99 2011-01-27 2013-01-23     727.0\n",
       "146   x99 2018-11-21 2015-07-20   -1220.0\n",
       "147   x99 2018-11-21 2013-01-23   -2128.0\n",
       "\n",
       "[148 rows x 4 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tenure\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tenure['eng_days'] = abs(df_tenure['eng_days'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tenure.to_csv('df_tenure.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tenure."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
